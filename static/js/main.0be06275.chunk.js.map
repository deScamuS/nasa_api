{"version":3,"sources":["components/DateInput.js","components/Photo.js","App.js","serviceWorker.js","index.js"],"names":["DateInput","props","onSubmit","changeDate","type","Photo","photo","title","src","url","alt","explanation","App","getPhoto","date","fetch","then","response","json","photoData","setState","e","preventDefault","dateFromInput","target","value","state","className","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAaeA,G,MAXG,SAACC,GACf,OAEI,0BAAMC,SAAUD,EAAME,YACtB,iEACA,gCACA,2BAAOC,KAAK,cCGLC,EATA,SAACJ,GACZ,OACI,6BACA,4BAAKA,EAAMK,MAAMC,OACjB,yBAAKC,IAAKP,EAAMK,MAAMG,IAAKC,IAAKT,EAAMK,MAAMC,QACxC,2BAAIN,EAAMK,MAAMK,eC6CbC,E,YA9Cb,aAAe,IAAD,8BACZ,+CAaFC,SAAW,SAAAC,GACTC,MAAM,4CAAD,OACyCD,EADzC,sDAGFE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,OAAI,EAAKC,SAAS,CAAEd,MAAOa,QAnBhC,EAsBdhB,WAAa,SAAAkB,GACXA,EAAEC,iBACF,IAAIC,EAAgBF,EAAEG,OAAO,GAAGC,MAChC,EAAKL,SAAS,CAAEN,KAAMS,IACtB,EAAKV,SAASU,IAxBd,EAAKG,MAAQ,CACXZ,KAAM,GACNR,MAAO,IAJG,E,iFAOO,IAAD,OAClBS,MACE,wFAECC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKE,SAAS,CAAEd,MAAOY,S,+BAkBvC,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,8CAGF,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAWxB,WAAYyB,KAAKzB,aAC5B,kBAAC,EAAD,CAAOG,MAAOsB,KAAKF,MAAMpB,QACzB,wD,GAxCQuB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.0be06275.chunk.js","sourcesContent":["import React from 'react'\n\nconst DateInput = (props) => {\n    return(\n        \n        <form onSubmit={props.changeDate}>\n        <h3>Please enter a Date (YYYY-MM-DD):</h3>\n        <input />\n        <input type='submit'/>\n        </form>\n      \n    )\n}\nexport default DateInput;","import React from 'react'\n\nconst Photo  = (props) => {\n    return(\n        <div>\n        <h2>{props.photo.title}</h2>\n        <img src={props.photo.url} alt={props.photo.title}/>\n            <p>{props.photo.explanation}</p>\n        </div>\n    )\n}\nexport default Photo;","import React from \"react\";\nimport \"./App.css\";\nimport DateInput from \"./components/DateInput\";\nimport Photo from \"./components/Photo\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      date: \"\",\n      photo: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\n      \"https://api.nasa.gov/planetary/apod?api_key=ZhbLuU3V2FtedrQw6gdtCg6hOOncb4OUe57JexYf\"\n    )\n      .then(response => response.json())\n      .then(json => this.setState({ photo: json }));\n  }\n  getPhoto = date => {\n    fetch(\n      `https://api.nasa.gov/planetary/apod?date=${date}&api_key=ZhbLuU3V2FtedrQw6gdtCg6hOOncb4OUe57JexYf`\n    )\n      .then(response => response.json())\n      .then(photoData => this.setState({ photo: photoData }));\n  };\n\n  changeDate = e => {\n    e.preventDefault();\n    let dateFromInput = e.target[0].value;\n    this.setState({ date: dateFromInput });\n    this.getPhoto(dateFromInput);\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h5>NASA | REACT </h5>\n        </header>\n\n        <div className='main'>\n          <DateInput changeDate={this.changeDate} />\n          <Photo photo={this.state.photo} />\n          <h2>Picture of the Day</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}